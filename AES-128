import numpy as np

'''
    AES-128 Encryption 标准实现
'''

# 标准正向S盒
AES_Sbox = np.array([
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
])

# 密钥拓展-轮常量
Rcon = np.array([
    [0x01,0x00,0x00,0x00],
    [0x02,0x00,0x00,0x00],
    [0x04,0x00,0x00,0x00],
    [0x08,0x00,0x00,0x00],
    [0x10,0x00,0x00,0x00],
    [0x20,0x00,0x00,0x00],
    [0x40,0x00,0x00,0x00],
    [0x80,0x00,0x00,0x00],
    [0x1b,0x00,0x00,0x00],
    [0x36,0x00,0x00,0x00],
])

# 轮函数及相关操作
def AddRoundKey(state,key):
    """
        state = [16 bytes],list
        key = [16 bytes],list
    """
    return [i^j for i,j in zip(state,key)]

def SubBytes(state):
    """
        state = [16 bytes],list
    """
    return [AES_Sbox[i] for i in state]

def key_word_ROL_1(key_word):
    """
        key_word = [4 bytes],list
        左循环1字节
    """
    return [key_word[1],key_word[2],key_word[3],key_word[0]]

def T(key_word,r):
    """
        key_word = [4 bytes],list
        r: round,int,指明当前调用为了生成第r个轮密钥（不计主密钥）
        密钥扩展--T变换
    """
    return [i^j for i,j in zip(SubBytes(key_word_ROL_1(key_word)),Rcon[r])]

def KeyExpand(key,r):
    """
        key = [16 bytes],list
        r:round,int
    """
    temp = [i^j for i,j in zip(T(key[12:],r),key[0:4])]
    for i in range(12):
        temp.append(temp[i] ^ key[i+4])
    return temp

def ShiftRows(state):#左移 右移
    """
        state = [16 bytes],list
    """
    # 左移
    return [state[0],state[5],state[10],state[15],
            state[4],state[9],state[14],state[3],
            state[8],state[13],state[2],state[7],
            state[12],state[1],state[6],state[11],
            ]
    # 右移
    # return [
    #     state[0], state[13], state[10], state[7],
    #     state[4], state[1], state[14], state[11],
    #     state[8], state[5], state[2], state[15],
    #     state[12], state[9], state[6], state[3],
    # ]

def Mul_GF(state_byte, x):
    """
        state_bytes, 1/16 of state, one byte
        x = 1/2/3
    """
    if x == 1:
        return state_byte
    elif x == 2:
        return ((state_byte<<1)&0xff) ^ (0x1b if (state_byte&0x80) else 0x00)
    elif x == 3:
        return ((state_byte << 1) & 0xff) ^ (0x1b if (state_byte & 0x80) else 0x00) ^ state_byte

def MixColumns(state):
    return [
        Mul_GF(state[0], 2) ^ Mul_GF(state[1], 3) ^ Mul_GF(state[2], 1) ^ Mul_GF(state[3], 1),
        Mul_GF(state[0], 1) ^ Mul_GF(state[1], 2) ^ Mul_GF(state[2], 3) ^ Mul_GF(state[3], 1),
        Mul_GF(state[0], 1) ^ Mul_GF(state[1], 1) ^ Mul_GF(state[2], 2) ^ Mul_GF(state[3], 3),
        Mul_GF(state[0], 3) ^ Mul_GF(state[1], 1) ^ Mul_GF(state[2], 1) ^ Mul_GF(state[3], 2),
        Mul_GF(state[4], 2) ^ Mul_GF(state[5], 3) ^ Mul_GF(state[6], 1) ^ Mul_GF(state[7], 1),
        Mul_GF(state[4], 1) ^ Mul_GF(state[5], 2) ^ Mul_GF(state[6], 3) ^ Mul_GF(state[7], 1),
        Mul_GF(state[4], 1) ^ Mul_GF(state[5], 1) ^ Mul_GF(state[6], 2) ^ Mul_GF(state[7], 3),
        Mul_GF(state[4], 3) ^ Mul_GF(state[5], 1) ^ Mul_GF(state[6], 1) ^ Mul_GF(state[7], 2),
        Mul_GF(state[8], 2) ^ Mul_GF(state[9], 3) ^ Mul_GF(state[10], 1) ^ Mul_GF(state[11], 1),
        Mul_GF(state[8], 1) ^ Mul_GF(state[9], 2) ^ Mul_GF(state[10], 3) ^ Mul_GF(state[11], 1),
        Mul_GF(state[8], 1) ^ Mul_GF(state[9], 1) ^ Mul_GF(state[10], 2) ^ Mul_GF(state[11], 3),
        Mul_GF(state[8], 3) ^ Mul_GF(state[9], 1) ^ Mul_GF(state[10], 1) ^ Mul_GF(state[11], 2),
        Mul_GF(state[12], 2) ^ Mul_GF(state[13], 3) ^ Mul_GF(state[14], 1) ^ Mul_GF(state[15], 1),
        Mul_GF(state[12], 1) ^ Mul_GF(state[13], 2) ^ Mul_GF(state[14], 3) ^ Mul_GF(state[15], 1),
        Mul_GF(state[12], 1) ^ Mul_GF(state[13], 1) ^ Mul_GF(state[14], 2) ^ Mul_GF(state[15], 3),
        Mul_GF(state[12], 3) ^ Mul_GF(state[13], 1) ^ Mul_GF(state[14], 1) ^ Mul_GF(state[15], 2),
    ]

def print_state_hex(state,operate_name):
    print(operate_name,[hex(i) for i in state])


# plt = [0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34]
# key = [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c]
plt = [0x00,0x01,0x00,0x01,0x01,0xa1,0x98,0xaf,0xda,0x78,0x17,0x34,0x86,0x15,0x35,0x66]
key = [0x00,0x01,0x20,0x01,0x71,0x01,0x98,0xae,0xda,0x79,0x17,0x14,0x60,0x15,0x35,0x94]

state = AddRoundKey(plt,key)

for i in range(10):
    # print("ROUND:",i+1)

    # print_state_hex(state, "before SubBytes")
    state = SubBytes(state)
    # print_state_hex(state, "after SubBytes")

    state = ShiftRows(state)
    # print_state_hex(state, "after ShiftRows")

    if i < 9:
        state = MixColumns(state)
        # print_state_hex(state, "after MixColumns")

    key = KeyExpand(key,i)
    # print expanded round key
    # print([hex(k) for k in key])
    state = AddRoundKey(state,key)
    # print_state_hex(state, "after AddRoundKey")
    
print_state_hex(state, "ciphertext")
