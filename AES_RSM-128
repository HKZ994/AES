import numpy as np

AES_Sbox = np.array([
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
])

Rcon = np.array([
    [0x01,0x00,0x00,0x00],
    [0x02,0x00,0x00,0x00],
    [0x04,0x00,0x00,0x00],
    [0x08,0x00,0x00,0x00],
    [0x10,0x00,0x00,0x00],
    [0x20,0x00,0x00,0x00],
    [0x40,0x00,0x00,0x00],
    [0x80,0x00,0x00,0x00],
    [0x1b,0x00,0x00,0x00],
    [0x36,0x00,0x00,0x00],
])

Masked_AES_SBox = [
    [0x77, 0x7b, 0x70, 0x6f, 0xc9, 0x63, 0x67, 0xfe, 0x27, 0x6b, 0x0d, 0x3c, 0x7a, 0xa7, 0xdb, 0xf2,
     0x71, 0xc5, 0x8e, 0xc6, 0xfc, 0x4b, 0x55, 0xf6, 0xa3, 0xae, 0xd8, 0xa1, 0xcc, 0x7e, 0xa8, 0x90,
     0x2a, 0x9f, 0xf1, 0xbb, 0xc0, 0xfb, 0x33, 0x3a, 0xfd, 0xe9, 0xa9, 0x38, 0x19, 0x3d, 0xd4, 0x7d,
     0xcf, 0x2f, 0xcb, 0x08, 0x96, 0x09, 0x9a, 0x14, 0xee, 0x8c, 0x1e, 0x0b, 0x79, 0xbe, 0x2b, 0xe7,
     0x16, 0x20, 0x8f, 0x05, 0xac, 0x56, 0x62, 0x17, 0xbf, 0xda, 0x37, 0x5e, 0x88, 0x23, 0xef, 0x25,
     0xe1, 0x0c, 0xdd, 0x5f, 0x57, 0xbd, 0xf0, 0x2c, 0x35, 0xb2, 0xc7, 0x66, 0xc3, 0x54, 0x40, 0x46,
     0xf7, 0xa6, 0xe3, 0xdc, 0x89, 0x3f, 0x41, 0x4f, 0x73, 0x0e, 0xf5, 0x49, 0xa4, 0x93, 0x30, 0x5c,
     0x83, 0x4c, 0xaf, 0x5d, 0xf9, 0x34, 0x91, 0x9e, 0x2d, 0xd6, 0xba, 0xb0, 0xde, 0xff, 0xf3, 0x1c,
     0xe0, 0x1f, 0x00, 0xc1, 0x1b, 0x48, 0x9b, 0x53, 0x31, 0x72, 0xab, 0xc8, 0x7f, 0x15, 0x51, 0x68,
     0xd0, 0x43, 0x8d, 0x6c, 0x84, 0x9c, 0x26, 0x2e, 0x18, 0xb4, 0xe2, 0x4a, 0xd7, 0x07, 0x52, 0xd2,
     0x06, 0x36, 0x3e, 0xec, 0x50, 0x28, 0x0a, 0x45, 0x6e, 0xa0, 0xdf, 0xce, 0x75, 0xe8, 0x99, 0x9d,
     0x61, 0x3b, 0xc4, 0xeb, 0xa5, 0x42, 0xd9, 0x81, 0xe6, 0xf8, 0x5a, 0x60, 0x04, 0xa2, 0x76, 0x69,
     0x22, 0x29, 0x74, 0xb6, 0xca, 0xb8, 0xaa, 0x10, 0x13, 0x78, 0xd1, 0xe4, 0x86, 0x87, 0xb1, 0x47,
     0x6a, 0xb9, 0x32, 0x7c, 0x02, 0xfa, 0x0f, 0x44, 0xb5, 0x5b, 0x39, 0x6d, 0x92, 0x11, 0xcd, 0x8a,
     0x1d, 0x94, 0xf4, 0xed, 0x98, 0x82, 0xd5, 0x65, 0xe5, 0x8b, 0x12, 0x97, 0xd3, 0x24, 0x59, 0xc2,
     0x01, 0x85, 0xad, 0x80, 0x64, 0x4e, 0xea, 0xb3, 0x03, 0x21, 0x95, 0x4d, 0x1a, 0xb7, 0x58, 0xbc],

    [0xcb, 0xe2, 0x9e, 0x43, 0x05, 0x34, 0x52, 0x1e, 0xc7, 0x5e, 0x5a, 0xf0, 0x56, 0x49, 0x42, 0x4e,
     0xa9, 0x91, 0x47, 0xf5, 0x98, 0xe1, 0x97, 0x9a, 0xcf, 0x6c, 0x72, 0xc5, 0xff, 0xb7, 0xfc, 0x48,
     0x44, 0xed, 0x04, 0x20, 0x01, 0x90, 0xd0, 0xc4, 0x03, 0x0a, 0xc2, 0xf9, 0x82, 0xc8, 0xa6, 0x13,
     0xde, 0x12, 0x87, 0x40, 0x32, 0x27, 0xb5, 0xd7, 0x2d, 0xa3, 0x30, 0xaf, 0x31, 0xf2, 0x16, 0xf6,
     0x1c, 0xd6, 0x1a, 0xb1, 0x67, 0x0e, 0xe3, 0x86, 0x2e, 0x5b, 0x6f, 0x95, 0x3c, 0xb6, 0x19, 0x2f,
     0x7f, 0x79, 0x6d, 0xfa, 0x5f, 0xfe, 0x8b, 0x0c, 0x15, 0xc9, 0x84, 0x6e, 0x66, 0xe4, 0x35, 0xd8,
     0x65, 0x09, 0xaa, 0x9d, 0x70, 0xcc, 0x37, 0x4a, 0x76, 0x78, 0x06, 0xb0, 0xe5, 0xda, 0x9f, 0xce,
     0x25, 0xca, 0xc6, 0xe7, 0x89, 0x83, 0xef, 0x14, 0xa7, 0xa8, 0x0d, 0xc0, 0x64, 0x96, 0x75, 0xba,
     0x51, 0x68, 0x2c, 0x46, 0xf1, 0x92, 0x4b, 0x08, 0x6a, 0xa2, 0x71, 0x22, 0xf8, 0x39, 0x26, 0xd9,
     0xeb, 0x6b, 0x3e, 0xee, 0x73, 0xdb, 0x8d, 0x21, 0x17, 0x1f, 0xa5, 0xbd, 0x55, 0xb4, 0x7a, 0xe9,
     0xa4, 0xa0, 0xd1, 0x4c, 0xf7, 0xe6, 0x99, 0x57, 0x7c, 0x33, 0x11, 0x69, 0xd5, 0x07, 0x0f, 0x3f,
     0x50, 0x4f, 0x9b, 0x3d, 0x59, 0x63, 0xc1, 0xdf, 0xb8, 0xe0, 0x7b, 0x9c, 0xd2, 0xfd, 0x02, 0x58,
     0x7e, 0x88, 0xbe, 0xbf, 0xdd, 0xe8, 0x41, 0x2a, 0x29, 0x93, 0x81, 0xf3, 0x8f, 0x4d, 0x10, 0x1b,
     0xb3, 0xf4, 0x28, 0xab, 0x54, 0x00, 0x62, 0x8c, 0x7d, 0x36, 0xc3, 0x3b, 0x45, 0x0b, 0x80, 0x53,
     0xfb, 0x60, 0x1d, 0xea, 0xae, 0x2b, 0xb2, 0xdc, 0x5c, 0xec, 0xbb, 0xa1, 0xd4, 0xcd, 0xad, 0x24,
     0x85, 0x61, 0x8e, 0x23, 0x74, 0xac, 0x18, 0x3a, 0x8a, 0xd3, 0x77, 0x5d, 0xb9, 0x94, 0xbc, 0x38],

    [0xac, 0x22, 0xa0, 0x3f, 0xfd, 0x3e, 0xf9, 0x19, 0x1d, 0xd1, 0x4f, 0x88, 0x28, 0x3d, 0xd8, 0xba,
     0x05, 0x0c, 0xf6, 0xcd, 0xc7, 0x8d, 0x1c, 0xa9, 0xe2, 0x4b, 0x2f, 0x0b, 0x9f, 0x0e, 0xcb, 0xdf,
     0x63, 0xc0, 0xca, 0x7d, 0xb8, 0xf0, 0x47, 0xf3, 0x9e, 0xa6, 0xfa, 0x48, 0xee, 0x97, 0x95, 0x98,
     0x51, 0xc8, 0xff, 0x55, 0x46, 0x59, 0x41, 0x4d, 0xed, 0xc4, 0x4c, 0x91, 0x3b, 0x0a, 0x11, 0x5d,
     0xa7, 0xa8, 0xcf, 0x02, 0x99, 0x6b, 0xb5, 0x7a, 0xc5, 0x2a, 0xe8, 0xc9, 0x8c, 0x86, 0x1b, 0xe0,
     0x77, 0x79, 0xbf, 0x09, 0xd5, 0xea, 0xc1, 0x90, 0x06, 0x6a, 0x92, 0xa5, 0xc3, 0x7f, 0x45, 0x38,
     0xc6, 0x1a, 0x61, 0x8b, 0xeb, 0x69, 0xd7, 0x3a, 0x76, 0x70, 0xf5, 0x62, 0xf1, 0x50, 0x03, 0x84,
     0x54, 0x21, 0x9a, 0x60, 0xb9, 0x33, 0x20, 0x16, 0xd9, 0x13, 0xbe, 0x15, 0x01, 0x68, 0x89, 0xec,
     0xef, 0xb7, 0x93, 0x74, 0xf2, 0xdd, 0x57, 0x0d, 0x40, 0x5f, 0x32, 0x94, 0x6c, 0x56, 0xd0, 0xce,
     0x3c, 0x73, 0x66, 0x1e, 0x08, 0xda, 0x30, 0x00, 0xaf, 0xab, 0x43, 0xde, 0xe9, 0xf8, 0x58, 0x96,
     0x10, 0x18, 0xb2, 0xaa, 0xbb, 0x5a, 0xe6, 0x75, 0x64, 0xe4, 0xe1, 0x31, 0xd4, 0x7c, 0x2e, 0x82,
     0xad, 0x65, 0x2d, 0x7e, 0x36, 0xf7, 0xd6, 0x29, 0x67, 0x5e, 0x49, 0x23, 0x9d, 0xfe, 0x07, 0x44,
     0xdc, 0x85, 0x52, 0x78, 0x9b, 0xb6, 0x37, 0xb3, 0x6e, 0x8a, 0x2c, 0x81, 0xa3, 0x7b, 0x35, 0x17,
     0xe3, 0x53, 0xae, 0xb4, 0xc2, 0xdb, 0x2b, 0xa2, 0x6f, 0xf4, 0xe5, 0x12, 0x24, 0xa1, 0xd3, 0xbd,
     0x39, 0x72, 0x34, 0xcc, 0x04, 0x4a, 0x5c, 0x8f, 0xfb, 0xbc, 0xa4, 0x27, 0x0f, 0x5b, 0x83, 0x6d,
     0x9c, 0x26, 0xfc, 0x8e, 0x42, 0x80, 0x14, 0x1f, 0x87, 0x71, 0xb0, 0xb1, 0xe7, 0xd2, 0x25, 0x4e],

    [0xd0, 0xb2, 0x57, 0x42, 0xe2, 0x25, 0xbb, 0x77, 0x73, 0x93, 0x54, 0x97, 0x55, 0xca, 0x48, 0xc6,
     0xb5, 0xa1, 0x64, 0xf5, 0x61, 0x45, 0x21, 0x88, 0xc3, 0x76, 0xe7, 0xad, 0xa7, 0x9c, 0x66, 0x6f,
     0xf2, 0xff, 0xfd, 0x84, 0x22, 0x90, 0xcc, 0xf4, 0x99, 0x2d, 0x9a, 0xd2, 0x17, 0xa0, 0xaa, 0x09,
     0x37, 0x7b, 0x60, 0x51, 0xfb, 0x26, 0xae, 0x87, 0x27, 0x2b, 0x33, 0x2c, 0x3f, 0x95, 0xa2, 0x3b,
     0x8a, 0x71, 0xec, 0xe6, 0xa3, 0x82, 0x40, 0xaf, 0x10, 0xdf, 0x01, 0xf3, 0x68, 0xa5, 0xc2, 0xcd,
     0x52, 0x2f, 0x15, 0xa9, 0xcf, 0xf8, 0x00, 0x6c, 0xfa, 0xab, 0x80, 0xbf, 0x63, 0xd5, 0x13, 0x1d,
     0xee, 0x69, 0x3a, 0x9b, 0x08, 0x9f, 0x1a, 0x1c, 0x50, 0xbd, 0x03, 0x81, 0xe1, 0x0b, 0x70, 0xac,
     0x86, 0xe3, 0x02, 0x6b, 0x7f, 0xd4, 0x79, 0xb3, 0x7c, 0x4a, 0x59, 0xd3, 0x0a, 0xf0, 0x4b, 0x3e,
     0xa4, 0xba, 0x3c, 0x06, 0xfe, 0x58, 0x35, 0x2a, 0x67, 0x3d, 0xb7, 0x98, 0x1e, 0xf9, 0xdd, 0x85,
     0xfc, 0x32, 0x92, 0x83, 0xb4, 0x29, 0xc1, 0xc5, 0x6a, 0x5a, 0xb0, 0x62, 0x74, 0x0c, 0x19, 0x56,
     0xe8, 0x44, 0x16, 0xbe, 0x5b, 0x8b, 0x8e, 0x0e, 0x1f, 0x8c, 0x30, 0xd1, 0xc0, 0xd8, 0x72, 0x7a,
     0x2e, 0x6d, 0x94, 0xf7, 0x49, 0x23, 0x34, 0x0d, 0x43, 0xbc, 0x9d, 0x5c, 0x14, 0x47, 0x0f, 0xc7,
     0x7d, 0x5f, 0x11, 0xc9, 0xeb, 0x46, 0xe0, 0x04, 0xd9, 0x5d, 0xdc, 0xf1, 0x12, 0x38, 0xef, 0xb6,
     0xd7, 0xb9, 0xcb, 0x4e, 0x78, 0x8f, 0x9e, 0x05, 0xc8, 0x41, 0xb1, 0xa8, 0xde, 0xc4, 0x39, 0x89,
     0x07, 0xe9, 0x31, 0x65, 0x4d, 0xce, 0xd6, 0x91, 0xe5, 0x36, 0x20, 0x6e, 0xa6, 0x5e, 0x18, 0x53,
     0x24, 0x4f, 0xb8, 0x8d, 0xdb, 0xda, 0x1b, 0xed, 0x75, 0x7e, 0xea, 0x28, 0xe4, 0x96, 0x4c, 0xf6],

    [0x0c, 0x8e, 0x5f, 0xb2, 0x7f, 0xa3, 0xee, 0x04, 0x35, 0x94, 0xe1, 0x66, 0x15, 0x13, 0x07, 0x90,
     0x56, 0xdc, 0x73, 0x45, 0x44, 0x31, 0x05, 0xff, 0x0d, 0x64, 0x89, 0xec, 0x76, 0xbc, 0x70, 0xdb,
     0x0e, 0xfc, 0x1f, 0xd0, 0xcd, 0xc2, 0x67, 0xaa, 0xe3, 0xe9, 0x85, 0x7e, 0x4f, 0xa0, 0xac, 0x8d,
     0x8f, 0xb0, 0xf5, 0xa4, 0x1c, 0x12, 0x6c, 0xda, 0x1a, 0xa6, 0x5d, 0x20, 0x0f, 0x63, 0xc0, 0xf7,
     0x95, 0xdd, 0x96, 0x22, 0xa5, 0x06, 0x18, 0xaf, 0xf2, 0x8b, 0xfd, 0xf0, 0xc3, 0xfb, 0x2d, 0x9f,
     0x3c, 0x23, 0x28, 0x24, 0xad, 0x34, 0x30, 0x9a, 0x6f, 0x5e, 0x38, 0x74, 0xa1, 0x88, 0xf4, 0x29,
     0x5b, 0x98, 0x7c, 0x9c, 0x47, 0xc9, 0x5a, 0xc5, 0x58, 0x4d, 0xdf, 0xbd, 0xb4, 0x78, 0xed, 0x2a,
     0xe8, 0xa2, 0xcc, 0x79, 0x69, 0x60, 0xa8, 0x93, 0x6b, 0xfa, 0xba, 0xae, 0x2e, 0x87, 0x6e, 0x4a,
     0x2f, 0x61, 0xea, 0x39, 0x17, 0x5c, 0xa9, 0x51, 0x3e, 0x6a, 0x08, 0xe6, 0xd9, 0x9e, 0x42, 0xc1,
     0xe5, 0x27, 0x7a, 0x71, 0x43, 0xf9, 0xeb, 0x99, 0xb7, 0x82, 0x2b, 0x40, 0x14, 0xe2, 0xd4, 0xd5,
     0xd3, 0xfe, 0xd6, 0x52, 0xe0, 0xb9, 0x1d, 0x37, 0x1e, 0xc6, 0x72, 0x50, 0xef, 0x0b, 0xe4, 0x49,
     0xbe, 0xa7, 0xc7, 0x4e, 0x36, 0x86, 0xd1, 0xcb, 0xc4, 0x41, 0xd8, 0xb6, 0x91, 0x0a, 0x77, 0x80,
     0x3f, 0xde, 0x10, 0x83, 0x7d, 0x75, 0xcf, 0xd7, 0x19, 0xb1, 0xe7, 0x4b, 0x81, 0x01, 0x54, 0x84,
     0x92, 0x53, 0x4c, 0xb3, 0x00, 0xc8, 0x1b, 0x48, 0x9b, 0xf8, 0x21, 0x62, 0x3b, 0x02, 0x46, 0x2c,
     0xb8, 0x97, 0x68, 0x32, 0xd2, 0x8a, 0x11, 0xf6, 0x33, 0x09, 0xab, 0xb5, 0x3a, 0x25, 0xf1, 0x57,
     0xbf, 0x6d, 0x65, 0x55, 0x16, 0x59, 0x7b, 0x03, 0x9d, 0x8c, 0xf3, 0x3d, 0xce, 0xca, 0xbb, 0x26],

    [0xa9, 0x3e, 0x2a, 0x2c, 0x5f, 0xd8, 0xad, 0x0c, 0x3d, 0xd7, 0x9a, 0x46, 0x8b, 0x66, 0xb7, 0x35,
     0xe2, 0x49, 0x85, 0x4f, 0xd5, 0xb0, 0x5d, 0x34, 0xc6, 0x3c, 0x08, 0x7d, 0x7c, 0x4a, 0xe5, 0x6f,
     0xb4, 0x95, 0x99, 0x76, 0x47, 0xbc, 0xd0, 0xda, 0x93, 0x5e, 0xfb, 0xf4, 0xe9, 0x26, 0xc5, 0x37,
     0xce, 0xf9, 0x5a, 0x36, 0x19, 0x64, 0x9f, 0x23, 0xe3, 0x55, 0x2b, 0x25, 0x9d, 0xcc, 0x89, 0xb6,
     0xa6, 0x14, 0xc2, 0xfa, 0xc9, 0xc4, 0xb2, 0xcb, 0x96, 0x21, 0x3f, 0x9c, 0x1b, 0xaf, 0xe4, 0xac,
     0x10, 0xcd, 0xb1, 0x98, 0x4d, 0x01, 0x67, 0x56, 0xa3, 0x09, 0x0d, 0x94, 0x1d, 0x11, 0x1a, 0x05,
     0x13, 0xd4, 0x41, 0x8d, 0x84, 0xe6, 0x74, 0x61, 0xfc, 0x63, 0xf0, 0x7e, 0xa5, 0x45, 0xa1, 0x62,
     0x73, 0x57, 0xbe, 0x17, 0x97, 0x83, 0xc3, 0x52, 0xaa, 0x91, 0x59, 0x50, 0x40, 0xf5, 0x9b, 0xd1,
     0xf8, 0x7b, 0xa7, 0xe0, 0xdf, 0x31, 0x53, 0x07, 0x68, 0x90, 0x65, 0x2e, 0x00, 0xd3, 0x58, 0x16,
     0xec, 0xed, 0xdb, 0x2d, 0x79, 0x12, 0xbb, 0x8e, 0xa0, 0xd2, 0xc0, 0x7a, 0x48, 0x43, 0x1e, 0xdc,
     0x70, 0xdd, 0x32, 0xd6, 0x69, 0x4b, 0xff, 0x27, 0x0e, 0x24, 0x80, 0xd9, 0x6b, 0xef, 0xc7, 0xea,
     0xb9, 0x4e, 0x33, 0xa8, 0x8f, 0xe1, 0x78, 0xfd, 0xf2, 0xe8, 0xbf, 0x0f, 0x77, 0xfe, 0x9e, 0x87,
     0xbd, 0x6d, 0x38, 0xb8, 0x72, 0xde, 0x88, 0x20, 0xee, 0xf6, 0x4c, 0x44, 0xba, 0x29, 0xe7, 0x06,
     0x15, 0x7f, 0x3b, 0x02, 0x5b, 0x18, 0xc1, 0xa2, 0x71, 0x22, 0xf1, 0x39, 0x8a, 0x75, 0x6a, 0xab,
     0x6e, 0xc8, 0x1c, 0x03, 0x8c, 0x92, 0x30, 0x0a, 0xcf, 0x28, 0xb3, 0xeb, 0x0b, 0x51, 0xae, 0x81,
     0x1f, 0x82, 0xf3, 0xf7, 0x04, 0xca, 0xb5, 0xa4, 0x3a, 0x42, 0x60, 0x2f, 0x6c, 0x5c, 0x54, 0x86],

    [0x5a, 0xec, 0x2a, 0x24, 0xc3, 0x92, 0xb9, 0x86, 0xf6, 0xc1, 0x39, 0x55, 0x6b, 0x16, 0x2c, 0x90,
     0x51, 0x9c, 0xfb, 0xf4, 0x29, 0xe6, 0x38, 0xca, 0x9a, 0xbb, 0x79, 0x96, 0xb3, 0x48, 0xd5, 0xdf,
     0x33, 0xc9, 0x72, 0x07, 0x45, 0x73, 0x60, 0xea, 0x46, 0xed, 0x40, 0x8a, 0xbf, 0xda, 0x3b, 0x52,
     0xd8, 0x32, 0x49, 0x95, 0x69, 0x84, 0x3a, 0xb8, 0x31, 0xa6, 0x23, 0x25, 0xd7, 0x50, 0x03, 0xa2,
     0x9e, 0xa5, 0x5f, 0x56, 0xfa, 0x4f, 0xde, 0x94, 0x58, 0x7c, 0x18, 0xb1, 0x8c, 0x98, 0x5d, 0xcc,
     0x6c, 0xf3, 0x71, 0xff, 0x4a, 0xaa, 0x6d, 0xae, 0xdb, 0x1c, 0x82, 0x4e, 0xe9, 0x8b, 0x6e, 0x7b,
     0x06, 0xac, 0x9b, 0x02, 0x1e, 0x12, 0x0a, 0x15, 0xc2, 0x1f, 0x97, 0xbe, 0x0e, 0x42, 0x59, 0x68,
     0x2e, 0x99, 0x93, 0x30, 0xa0, 0x14, 0xa3, 0xeb, 0x1b, 0xa9, 0xf5, 0xcd, 0xcb, 0xc6, 0xc4, 0xbd,
     0xe7, 0xfd, 0x00, 0xb0, 0xf1, 0x78, 0x88, 0x91, 0x41, 0xb6, 0xa7, 0x3c, 0xee, 0x80, 0xf2, 0x77,
     0x2b, 0x01, 0xd6, 0x8f, 0xe0, 0x64, 0xe5, 0xc8, 0xd2, 0x7f, 0xd9, 0x3d, 0x44, 0x66, 0x28, 0xf0,
     0xdd, 0xaf, 0x75, 0xcf, 0x4c, 0x47, 0xd3, 0x11, 0xe2, 0xe3, 0x22, 0xd4, 0x1d, 0x76, 0x81, 0xb4,
     0x9f, 0x67, 0x21, 0x6a, 0xdc, 0x0f, 0x19, 0x57, 0x74, 0xf7, 0xef, 0xa8, 0x3e, 0xd0, 0x08, 0x5c,
     0x4d, 0x35, 0x20, 0x6f, 0x53, 0x63, 0x89, 0x5b, 0x8d, 0x10, 0xf8, 0xfc, 0xc5, 0x0b, 0xab, 0xba,
     0x27, 0xc0, 0xe4, 0xbc, 0x5e, 0x04, 0x8e, 0xa1, 0xc7, 0x61, 0x0c, 0x13, 0x9d, 0x83, 0x05, 0x3f,
     0x2d, 0x7e, 0x36, 0xfe, 0x7a, 0x85, 0xa4, 0x65, 0x70, 0x1a, 0x0d, 0x34, 0x17, 0x54, 0xad, 0xce,
     0xf9, 0xe1, 0x4b, 0x43, 0x26, 0xb5, 0x09, 0xe8, 0x62, 0xb2, 0xb7, 0x37, 0xd1, 0x7d, 0x2f, 0x87],

    [0x6f, 0xd3, 0xe9, 0x94, 0xaa, 0xc6, 0x3e, 0x09, 0x79, 0x46, 0x6d, 0x3c, 0xdb, 0xd5, 0x13, 0xa5,
     0x20, 0x2a, 0xb7, 0x4c, 0x69, 0x86, 0x44, 0x65, 0x35, 0xc7, 0x19, 0xd6, 0x0b, 0x04, 0x63, 0xae,
     0xad, 0xc4, 0x25, 0x40, 0x75, 0xbf, 0x12, 0xb9, 0x15, 0x9f, 0x8c, 0xba, 0xf8, 0x8d, 0x36, 0xcc,
     0x5d, 0xfc, 0xaf, 0x28, 0xda, 0xdc, 0x59, 0xce, 0x47, 0xc5, 0x7b, 0x96, 0x6a, 0xb6, 0xcd, 0x27,
     0x33, 0xa2, 0x67, 0x73, 0x4e, 0xe7, 0x83, 0xa7, 0x6b, 0x21, 0xb0, 0x05, 0xa9, 0xa0, 0x5a, 0x61,
     0x84, 0x91, 0x74, 0x16, 0xb1, 0x7d, 0xe3, 0x24, 0x51, 0x92, 0x55, 0xb5, 0x00, 0x8e, 0x0c, 0x93,
     0x97, 0xa6, 0xbd, 0xf1, 0x41, 0x68, 0xe0, 0x3d, 0xea, 0xf5, 0xed, 0xe1, 0xfd, 0x64, 0x53, 0xf9,
     0x42, 0x3b, 0x39, 0x34, 0x32, 0x0a, 0x56, 0xe4, 0x14, 0x5c, 0xeb, 0x5f, 0xcf, 0x6c, 0x66, 0xd1,
     0x88, 0x0d, 0x7f, 0x11, 0xc3, 0x58, 0x49, 0xbe, 0x6e, 0x77, 0x87, 0x0e, 0x4f, 0xff, 0x02, 0x18,
     0x0f, 0xd7, 0x99, 0xbb, 0xc2, 0x26, 0x80, 0x2d, 0x37, 0x1a, 0x9b, 0x1f, 0x70, 0x29, 0xfe, 0xd4,
     0x4b, 0x7e, 0x89, 0xe2, 0x2b, 0xdd, 0x1c, 0x1d, 0xee, 0x2c, 0xb8, 0xb3, 0x30, 0x8a, 0x50, 0x22,
     0xa3, 0xf7, 0x2f, 0xc1, 0x57, 0x10, 0x08, 0x8b, 0xa8, 0xe6, 0xf0, 0x23, 0x95, 0xde, 0x98, 0x60,
     0x45, 0x54, 0xf4, 0x3a, 0x03, 0x07, 0xef, 0x72, 0xa4, 0x76, 0x9c, 0xac, 0x90, 0xdf, 0xca, 0xb2,
     0xc0, 0xfa, 0x7c, 0x62, 0xec, 0xf3, 0x9e, 0x38, 0x5e, 0x71, 0xfb, 0xa1, 0x43, 0x1b, 0x3f, 0xd8,
     0x31, 0x52, 0xab, 0xe8, 0xcb, 0xf2, 0xe5, 0x8f, 0x9a, 0x5b, 0x7a, 0x85, 0x01, 0xc9, 0x81, 0xd2,
     0x78, 0xd0, 0x82, 0x2e, 0xc8, 0x48, 0x4d, 0x9d, 0x17, 0xf6, 0x4a, 0xd9, 0xbc, 0xb4, 0x1e, 0x06],

    [0x09, 0x11, 0xbb, 0xb3, 0xd6, 0x45, 0xf9, 0x18, 0x92, 0x42, 0x47, 0xc7, 0x21, 0x8d, 0xdf, 0x77,
     0xdd, 0x8e, 0xc6, 0x0e, 0x8a, 0x75, 0x54, 0x95, 0x80, 0xea, 0xfd, 0xc4, 0xe7, 0xa4, 0x5d, 0x3e,
     0xd7, 0x30, 0x14, 0x4c, 0xae, 0xf4, 0x7e, 0x51, 0x37, 0x91, 0xfc, 0xe3, 0x6d, 0x73, 0xf5, 0xcf,
     0xbd, 0xc5, 0xd0, 0x9f, 0xa3, 0x93, 0x79, 0xab, 0x7d, 0xe0, 0x08, 0x0c, 0x35, 0xfb, 0x5b, 0x4a,
     0x6f, 0x97, 0xd1, 0x9a, 0x2c, 0xff, 0xe9, 0xa7, 0x84, 0x07, 0x1f, 0x58, 0xce, 0x20, 0xf8, 0xac,
     0x2d, 0x5f, 0x85, 0x3f, 0xbc, 0xb7, 0x23, 0xe1, 0x12, 0x13, 0xd2, 0x24, 0xed, 0x86, 0x71, 0x44,
     0xdb, 0xf1, 0x26, 0x7f, 0x10, 0x94, 0x15, 0x38, 0x22, 0x8f, 0x29, 0xcd, 0xb4, 0x96, 0xd8, 0x00,
     0x17, 0x0d, 0xf0, 0x40, 0x01, 0x88, 0x78, 0x61, 0xb1, 0x46, 0x57, 0xcc, 0x1e, 0x70, 0x02, 0x87,
     0xde, 0x69, 0x63, 0xc0, 0x50, 0xe4, 0x53, 0x1b, 0xeb, 0x59, 0x05, 0x3d, 0x3b, 0x36, 0x34, 0x4d,
     0xf6, 0x5c, 0x6b, 0xf2, 0xee, 0xe2, 0xfa, 0xe5, 0x32, 0xef, 0x67, 0x4e, 0xfe, 0xb2, 0xa9, 0x98,
     0x9c, 0x03, 0x81, 0x0f, 0xba, 0x5a, 0x9d, 0x5e, 0x2b, 0xec, 0x72, 0xbe, 0x19, 0x7b, 0x9e, 0x8b,
     0x6e, 0x55, 0xaf, 0xa6, 0x0a, 0xbf, 0x2e, 0x64, 0xa8, 0x8c, 0xe8, 0x41, 0x7c, 0x68, 0xad, 0x3c,
     0x28, 0xc2, 0xb9, 0x65, 0x99, 0x74, 0xca, 0x48, 0xc1, 0x56, 0xd3, 0xd5, 0x27, 0xa0, 0xf3, 0x52,
     0xc3, 0x39, 0x82, 0xf7, 0xb5, 0x83, 0x90, 0x1a, 0xb6, 0x1d, 0xb0, 0x7a, 0x4f, 0x2a, 0xcb, 0xa2,
     0xa1, 0x6c, 0x0b, 0x04, 0xd9, 0x16, 0xc8, 0x3a, 0x6a, 0x4b, 0x89, 0x66, 0x43, 0xb8, 0x25, 0x2f,
     0xaa, 0x1c, 0xda, 0xd4, 0x33, 0x62, 0x49, 0x76, 0x06, 0x31, 0xc9, 0xa5, 0x9b, 0xe6, 0xdc, 0x60],

    [0x4e, 0xe6, 0xb4, 0x18, 0xfe, 0x7e, 0x7b, 0xab, 0x21, 0xc0, 0x7c, 0xef, 0x8a, 0x82, 0x28, 0x30,
     0x07, 0x64, 0x9d, 0xde, 0xfd, 0xc4, 0xd3, 0xb9, 0xac, 0x6d, 0x4c, 0xb3, 0x37, 0xff, 0xb7, 0xe4,
     0xf6, 0xcc, 0x4a, 0x54, 0xda, 0xc5, 0xa8, 0x0e, 0x68, 0x47, 0xcd, 0x97, 0x75, 0x2d, 0x09, 0xee,
     0x73, 0x62, 0xc2, 0x0c, 0x35, 0x31, 0xd9, 0x44, 0x92, 0x40, 0xaa, 0x9a, 0xa6, 0xe9, 0xfc, 0x84,
     0x95, 0xc1, 0x19, 0xf7, 0x61, 0x26, 0x3e, 0xbd, 0x9e, 0xd0, 0xc6, 0x15, 0xa3, 0xe8, 0xae, 0x56,
     0x7d, 0x48, 0xbf, 0xd4, 0x1d, 0xeb, 0x2a, 0x2b, 0xd8, 0x1a, 0x8e, 0x85, 0x06, 0xbc, 0x66, 0x14,
     0x39, 0xe1, 0xaf, 0x8d, 0xf4, 0x10, 0xb6, 0x1b, 0x01, 0x2c, 0xad, 0x29, 0x46, 0x1f, 0xc8, 0xe2,
     0xbe, 0x3b, 0x49, 0x27, 0xf5, 0x6e, 0x7f, 0x88, 0x58, 0x41, 0xb1, 0x38, 0x79, 0xc9, 0x34, 0x2e,
     0x74, 0x0d, 0x0f, 0x02, 0x04, 0x3c, 0x60, 0xd2, 0x22, 0x6a, 0xdd, 0x69, 0xf9, 0x5a, 0x50, 0xe7,
     0xa1, 0x90, 0x8b, 0xc7, 0x77, 0x5e, 0xd6, 0x0b, 0xdc, 0xc3, 0xdb, 0xd7, 0xcb, 0x52, 0x65, 0xcf,
     0xb2, 0xa7, 0x42, 0x20, 0x87, 0x4b, 0xd5, 0x12, 0x67, 0xa4, 0x63, 0x83, 0x36, 0xb8, 0x3a, 0xa5,
     0x05, 0x94, 0x51, 0x45, 0x78, 0xd1, 0xb5, 0x91, 0x5d, 0x17, 0x86, 0x33, 0x9f, 0x96, 0x6c, 0x57,
     0x6b, 0xca, 0x99, 0x1e, 0xec, 0xea, 0x6f, 0xf8, 0x71, 0xf3, 0x4d, 0xa0, 0x5c, 0x80, 0xfb, 0x11,
     0x9b, 0xf2, 0x13, 0x76, 0x43, 0x89, 0x24, 0x8f, 0x23, 0xa9, 0xba, 0x8c, 0xce, 0xbb, 0x00, 0xfa,
     0x16, 0x1c, 0x81, 0x7a, 0x5f, 0xb0, 0x72, 0x53, 0x03, 0xf1, 0x2f, 0xe0, 0x3d, 0x32, 0x55, 0x98,
     0x59, 0xe5, 0xdf, 0xa2, 0x9c, 0xf0, 0x08, 0x3f, 0x4f, 0x70, 0x5b, 0x0a, 0xed, 0xe3, 0x25, 0x93],

    [0x4f, 0x9d, 0x95, 0xa5, 0xe6, 0xa9, 0x8b, 0xf3, 0x6d, 0x7c, 0x03, 0xcd, 0x3e, 0x3a, 0x4b, 0xd6,
     0x48, 0x67, 0x98, 0xc2, 0x22, 0x7a, 0xe1, 0x06, 0xc3, 0xf9, 0x5b, 0x45, 0xca, 0xd5, 0x01, 0xa7,
     0x62, 0xa3, 0xbc, 0x43, 0xf0, 0x38, 0xeb, 0xb8, 0x6b, 0x08, 0xd1, 0x92, 0xcb, 0xf2, 0xb6, 0xdc,
     0xcf, 0x2e, 0xe0, 0x73, 0x8d, 0x85, 0x3f, 0x27, 0xe9, 0x41, 0x17, 0xbb, 0x71, 0xf1, 0xa4, 0x74,
     0x4e, 0x57, 0x37, 0xbe, 0xc6, 0x76, 0x21, 0x3b, 0x34, 0xb1, 0x28, 0x46, 0x61, 0xfa, 0x87, 0x70,
     0x23, 0x0e, 0x26, 0xa2, 0x10, 0x49, 0xed, 0xc7, 0xee, 0x36, 0x82, 0xa0, 0x1f, 0xfb, 0x14, 0xb9,
     0x15, 0xd7, 0x8a, 0x81, 0xb3, 0x09, 0x1b, 0x69, 0x47, 0x72, 0xdb, 0xb0, 0xe4, 0x12, 0x24, 0x25,
     0xdf, 0x91, 0x1a, 0xc9, 0xe7, 0xac, 0x59, 0xa1, 0xce, 0x9a, 0xf8, 0x16, 0x29, 0x6e, 0xb2, 0x31,
     0x18, 0x52, 0x3c, 0x89, 0x99, 0x90, 0x58, 0x63, 0x9b, 0x0a, 0x4a, 0x5e, 0xde, 0x77, 0x9e, 0xba,
     0xab, 0x68, 0x8c, 0x6c, 0xb7, 0x39, 0xaa, 0x35, 0xa8, 0xbd, 0x2f, 0x4d, 0x44, 0x88, 0x1d, 0xda,
     0xcc, 0xd3, 0xd8, 0xd4, 0x5d, 0xc4, 0xc0, 0x6a, 0x9f, 0xae, 0xc8, 0x84, 0x51, 0x78, 0x04, 0xd9,
     0x65, 0x2d, 0x66, 0xd2, 0x55, 0xf6, 0xe8, 0x5f, 0x02, 0x7b, 0x0d, 0x00, 0x33, 0x0b, 0xdd, 0x6f,
     0x7f, 0x40, 0x05, 0x54, 0xec, 0xe2, 0x9c, 0x2a, 0xea, 0x56, 0xad, 0xd0, 0xff, 0x93, 0x30, 0x07,
     0xfe, 0x0c, 0xef, 0x20, 0x3d, 0x32, 0x97, 0x5a, 0x13, 0x19, 0x75, 0x8e, 0xbf, 0x50, 0x5c, 0x7d,
     0xa6, 0x2c, 0x83, 0xb5, 0xb4, 0xc1, 0xf5, 0x0f, 0xfd, 0x94, 0x79, 0x1c, 0x86, 0x4c, 0x80, 0x2b,
     0xfc, 0x7e, 0xaf, 0x42, 0x8f, 0x53, 0x1e, 0xf4, 0xc5, 0x64, 0x11, 0x96, 0xe5, 0xe3, 0xf7, 0x60],

    [0xbc, 0x21, 0x50, 0x54, 0xa7, 0x69, 0x16, 0x07, 0x99, 0xe1, 0xc3, 0x8c, 0xcf, 0xff, 0xf7, 0x25,
     0xcd, 0x6b, 0xbf, 0xa0, 0x2f, 0x31, 0x93, 0xa9, 0x6c, 0x8b, 0x10, 0x48, 0xa8, 0xf2, 0x0d, 0x22,
     0xb6, 0xdc, 0x98, 0xa1, 0xf8, 0xbb, 0x62, 0x01, 0xd2, 0x81, 0x52, 0x9a, 0x29, 0xd6, 0xc9, 0x08,
     0x1e, 0xce, 0x9b, 0x1b, 0xd1, 0x7d, 0x2b, 0x83, 0x4d, 0x55, 0xef, 0xe7, 0x19, 0x8a, 0x44, 0xa5,
     0x1a, 0xed, 0x90, 0x0b, 0x2c, 0x42, 0xdb, 0x5e, 0x51, 0x4b, 0x1c, 0xac, 0xd4, 0x5d, 0x3d, 0x24,
     0xd3, 0x7e, 0x91, 0x75, 0xca, 0xe8, 0x5c, 0x84, 0xad, 0x87, 0x23, 0x7a, 0xc8, 0x4c, 0x64, 0x49,
     0x4f, 0x4e, 0x78, 0x8e, 0xda, 0xb1, 0x18, 0x2d, 0x03, 0x71, 0x63, 0xd9, 0xeb, 0xe0, 0xbd, 0x7f,
     0x5b, 0xd8, 0x04, 0x43, 0x7c, 0x92, 0xf0, 0xa4, 0xcb, 0x33, 0xc6, 0x8d, 0xa3, 0x70, 0xfb, 0xb5,
     0xd0, 0xf4, 0x1d, 0xb4, 0x34, 0x20, 0x60, 0xf1, 0x09, 0x32, 0xfa, 0xf3, 0xe3, 0x56, 0x38, 0x72,
     0xb0, 0x77, 0xe2, 0x2e, 0x27, 0x45, 0xd7, 0xc2, 0x5f, 0xc0, 0x53, 0xdd, 0x06, 0xe6, 0x02, 0xc1,
     0xb3, 0x6e, 0x12, 0x3b, 0xee, 0xa2, 0xc4, 0xf5, 0x00, 0xaa, 0xae, 0x37, 0xbe, 0xb2, 0xb9, 0xa6,
     0x05, 0xb7, 0x61, 0x59, 0x6a, 0x67, 0x11, 0x68, 0x35, 0x82, 0x9c, 0x3f, 0xb8, 0x0c, 0x47, 0x0f,
     0x6d, 0x5a, 0xf9, 0x95, 0xba, 0xc7, 0x3c, 0x80, 0x40, 0xf6, 0x88, 0x86, 0x3e, 0x6f, 0x2a, 0x15,
     0x17, 0x36, 0x3a, 0xd5, 0xe4, 0x1f, 0x73, 0x79, 0x30, 0xfd, 0x58, 0x57, 0x4a, 0x85, 0x66, 0x94,
     0x41, 0xea, 0x26, 0xec, 0x76, 0x13, 0xfe, 0x97, 0x65, 0x9f, 0xab, 0xde, 0xdf, 0xe9, 0x46, 0xcc,
     0x0a, 0x9d, 0x89, 0x8f, 0xfc, 0x7b, 0x0e, 0xaf, 0x9e, 0x74, 0x39, 0xe5, 0x28, 0xc5, 0x14, 0x96],

    [0x6c, 0xd6, 0x0c, 0x7e, 0xb2, 0x70, 0xe4, 0xef, 0x77, 0x81, 0x40, 0x41, 0x17, 0x22, 0xd5, 0xbe,
     0xc9, 0x82, 0xc4, 0x3c, 0xf4, 0xba, 0xac, 0x7f, 0x0b, 0x4c, 0x54, 0xd7, 0xff, 0xab, 0x73, 0x9d,
     0x13, 0xa3, 0x5e, 0x44, 0x32, 0x2b, 0xdb, 0x52, 0x9f, 0x04, 0x15, 0xe2, 0xd4, 0x51, 0x23, 0x4d,
     0x2c, 0x75, 0xa2, 0x88, 0x6b, 0x46, 0xc7, 0x43, 0x9e, 0x7a, 0xdc, 0x71, 0x53, 0x8b, 0xc5, 0xe7,
     0x5d, 0x95, 0xdd, 0x8e, 0xc6, 0x07, 0x26, 0xd9, 0x97, 0xae, 0xb9, 0xd3, 0x6d, 0x0e, 0xf7, 0xb4,
     0xe0, 0xe8, 0x42, 0x5a, 0x4b, 0xaa, 0x16, 0x85, 0x94, 0x14, 0x11, 0xc1, 0x24, 0x8c, 0xde, 0x72,
     0xcc, 0x83, 0x96, 0xee, 0xf8, 0x2a, 0xc0, 0xf0, 0x5f, 0x5b, 0xb3, 0x2e, 0x19, 0x08, 0xa8, 0x66,
     0x1f, 0x47, 0x63, 0x84, 0x02, 0x2d, 0xa7, 0xfd, 0xb0, 0xaf, 0xc2, 0x64, 0x9c, 0xa6, 0x20, 0x3e,
     0xa4, 0xd1, 0x6a, 0x90, 0x49, 0xc3, 0xd0, 0xe6, 0x29, 0xe3, 0x4e, 0xe5, 0xf1, 0x98, 0x79, 0x1c,
     0x36, 0xea, 0x91, 0x7b, 0x1b, 0x99, 0x27, 0xca, 0x86, 0x80, 0x05, 0x92, 0x01, 0xa0, 0xf3, 0x74,
     0x87, 0x89, 0x4f, 0xf9, 0x25, 0x1a, 0x31, 0x60, 0xf6, 0x9a, 0x62, 0x55, 0x33, 0x8f, 0xb5, 0xc8,
     0x57, 0x58, 0x3f, 0xf2, 0x69, 0x9b, 0x45, 0x8a, 0x35, 0xda, 0x18, 0x39, 0x7c, 0x76, 0xeb, 0x10,
     0xa1, 0x38, 0x0f, 0xa5, 0xb6, 0xa9, 0xb1, 0xbd, 0x1d, 0x34, 0xbc, 0x61, 0xcb, 0xfa, 0xe1, 0xad,
     0x93, 0x30, 0x3a, 0x8d, 0x48, 0x00, 0xb7, 0x03, 0x6e, 0x56, 0x0a, 0xb8, 0x1e, 0x67, 0x65, 0x68,
     0xf5, 0xfc, 0x06, 0x3d, 0x37, 0x7d, 0xec, 0x59, 0x12, 0xbb, 0xdf, 0xfb, 0x6f, 0xfe, 0x3b, 0x2f,
     0x5c, 0xd2, 0x50, 0xcf, 0x0d, 0xce, 0x09, 0xe9, 0xed, 0x21, 0xbf, 0x78, 0xd8, 0xcd, 0x28, 0x4a],

    [0x87, 0xec, 0x1b, 0x2e, 0x78, 0x79, 0xb8, 0x4e, 0xd6, 0xdd, 0x49, 0x8b, 0x47, 0x35, 0xef, 0x55,
     0xa4, 0x4a, 0x92, 0xc6, 0xee, 0x6d, 0x75, 0x32, 0x46, 0x95, 0x83, 0xcd, 0x05, 0xfd, 0xbb, 0xf0,
     0x74, 0x1a, 0x68, 0xed, 0xdb, 0x2c, 0x3d, 0xa6, 0x6b, 0xe2, 0x12, 0x0b, 0x7d, 0x67, 0x9a, 0x2a,
     0xde, 0xfc, 0xb2, 0x6a, 0x48, 0xe5, 0x43, 0xa7, 0x7a, 0xfe, 0x7f, 0x52, 0xb1, 0x9b, 0x4c, 0x15,
     0x8d, 0xce, 0x37, 0x54, 0xea, 0x80, 0x97, 0xae, 0xe0, 0x1f, 0x3e, 0xff, 0xb7, 0xe4, 0xac, 0x64,
     0x4b, 0xe7, 0xb5, 0x1d, 0xf8, 0x28, 0x2d, 0xad, 0xbc, 0x2f, 0x93, 0x72, 0x63, 0x7b, 0xd1, 0xd9,
     0x5f, 0x91, 0x31, 0x20, 0x17, 0x8a, 0x62, 0x66, 0xc9, 0xf9, 0x13, 0xc1, 0xd7, 0xaf, 0xba, 0xf5,
     0x07, 0x19, 0x9f, 0xa5, 0x5d, 0xfb, 0x96, 0x89, 0xc4, 0x9e, 0x14, 0x3b, 0xbd, 0x5a, 0x7e, 0x26,
     0x25, 0x40, 0xa1, 0xc8, 0xdc, 0x77, 0xda, 0x10, 0xdf, 0xe9, 0xfa, 0x70, 0xa9, 0x53, 0xe8, 0x9d,
     0x4d, 0xca, 0x99, 0x38, 0xab, 0x3c, 0xb9, 0xbf, 0xf3, 0x1e, 0xa0, 0x22, 0x42, 0xa8, 0xd3, 0x0f,
     0xf1, 0x8c, 0xb6, 0x0a, 0x6c, 0x5b, 0xa3, 0xcf, 0x59, 0x08, 0x23, 0x1c, 0xc0, 0x76, 0xb0, 0xbe,
     0x29, 0xd2, 0x4f, 0x45, 0x00, 0x21, 0xe3, 0x0c, 0xb3, 0x7c, 0xa2, 0x50, 0xcb, 0x06, 0x61, 0x6e,
     0x94, 0xd8, 0xc3, 0xf2, 0x58, 0x85, 0x0d, 0x24, 0x84, 0x88, 0x90, 0x8f, 0x9c, 0x36, 0x01, 0x98,
     0x51, 0x5c, 0x5e, 0x27, 0x81, 0x33, 0x6f, 0x57, 0x3a, 0x8e, 0x39, 0x71, 0xb4, 0x03, 0x09, 0xaa,
     0x16, 0x02, 0xc7, 0x56, 0xc2, 0xe6, 0x82, 0x2b, 0x60, 0xd5, 0x44, 0x0e, 0x04, 0x3f, 0xc5, 0xcc,
     0x73, 0x11, 0xf4, 0xe1, 0x41, 0x86, 0x18, 0xd4, 0xd0, 0x30, 0xf7, 0x34, 0xf6, 0x69, 0xeb, 0x65],

    [0xf1, 0x75, 0x5d, 0x70, 0x94, 0xbe, 0x1a, 0x43, 0xf3, 0xd1, 0x65, 0xbd, 0xea, 0x47, 0xa8, 0x4c,
     0xed, 0x64, 0x04, 0x1d, 0x68, 0x72, 0x25, 0x95, 0x15, 0x7b, 0xe2, 0x67, 0x23, 0xd4, 0xa9, 0x32,
     0x9a, 0x49, 0xc2, 0x8c, 0xf2, 0x0a, 0xff, 0xb4, 0x45, 0xab, 0xc9, 0x9d, 0x62, 0xe1, 0x3d, 0x7a,
     0xd2, 0xd9, 0x84, 0x46, 0x3a, 0x48, 0x5a, 0xe0, 0xe3, 0x88, 0x21, 0x14, 0x76, 0x77, 0x41, 0xb7,
     0x91, 0xcb, 0x34, 0x1b, 0x55, 0xb2, 0x29, 0x71, 0x16, 0x08, 0xaa, 0x90, 0xf4, 0x52, 0x86, 0x99,
     0xf6, 0xc6, 0xce, 0x1c, 0xa0, 0xd8, 0xfa, 0xb5, 0x9e, 0x50, 0x2f, 0x3e, 0x85, 0x18, 0x69, 0x6d,
     0x20, 0xb3, 0x7d, 0x9c, 0x74, 0x6c, 0xd6, 0xde, 0xe8, 0x44, 0x12, 0xba, 0x27, 0xf7, 0xa2, 0x22,
     0x10, 0xef, 0xf0, 0x31, 0xeb, 0xb8, 0x6b, 0xa3, 0xc1, 0x82, 0x5b, 0x38, 0x8f, 0xe5, 0xa1, 0x98,
     0x73, 0xbc, 0x5f, 0xad, 0x09, 0xc4, 0x61, 0x6e, 0xdd, 0x26, 0x4a, 0x40, 0x2e, 0x0f, 0x03, 0xec,
     0x07, 0x56, 0x13, 0x2c, 0x79, 0xcf, 0xb1, 0xbf, 0x83, 0xfe, 0x05, 0xb9, 0x54, 0x63, 0xc0, 0xac,
     0x11, 0xfc, 0x2d, 0xaf, 0xa7, 0x4d, 0x00, 0xdc, 0xc5, 0x42, 0x37, 0x96, 0x33, 0xa4, 0xb0, 0xb6,
     0xe6, 0xd0, 0x7f, 0xf5, 0x5c, 0xa6, 0x92, 0xe7, 0x4f, 0x2a, 0xc7, 0xae, 0x78, 0xd3, 0x1f, 0xd5,
     0x3f, 0xdf, 0x3b, 0xf8, 0x66, 0xf9, 0x6a, 0xe4, 0x1e, 0x7c, 0xee, 0xfb, 0x89, 0x4e, 0xdb, 0x17,
     0xda, 0x6f, 0x01, 0x4b, 0x30, 0x0b, 0xc3, 0xca, 0x0d, 0x19, 0x59, 0xc8, 0xe9, 0xcd, 0x24, 0x8d,
     0x81, 0x35, 0x7e, 0x36, 0x0c, 0xbb, 0xa5, 0x06, 0x53, 0x5e, 0x28, 0x51, 0x3c, 0x8e, 0x58, 0x60,
     0x87, 0x8b, 0x80, 0x9f, 0x39, 0x93, 0x97, 0x0e, 0xd7, 0x9b, 0xfd, 0xcc, 0x8a, 0x57, 0x2b, 0x02],

    [0xb3, 0x57, 0xb8, 0x15, 0x42, 0x9a, 0x2e, 0x0c, 0xbc, 0xe5, 0x41, 0x6b, 0x8f, 0xa2, 0x8a, 0x0e,
     0xcd, 0x56, 0x2b, 0xdc, 0x98, 0x1d, 0x84, 0xea, 0x6a, 0xda, 0x8d, 0x97, 0xe2, 0xfb, 0x9b, 0x12,
     0x85, 0xc2, 0x1e, 0x9d, 0x62, 0x36, 0x54, 0xba, 0x4b, 0x00, 0xf5, 0x0d, 0x73, 0x3d, 0xb6, 0x65,
     0x48, 0xbe, 0x88, 0x89, 0xeb, 0xde, 0x77, 0x1c, 0x1f, 0xa5, 0xb7, 0xc5, 0xb9, 0x7b, 0x26, 0x2d,
     0x66, 0x79, 0xad, 0x0b, 0x6f, 0x55, 0xf7, 0xe9, 0x8e, 0xd6, 0x4d, 0xaa, 0xe4, 0xcb, 0x34, 0x6e,
     0x92, 0x96, 0xe7, 0x7a, 0xc1, 0xd0, 0xaf, 0x61, 0x4a, 0x05, 0x27, 0x5f, 0xe3, 0x31, 0x39, 0x09,
     0xdd, 0x5d, 0x08, 0xd8, 0x45, 0xed, 0xbb, 0x17, 0x21, 0x29, 0x93, 0x8b, 0x63, 0x82, 0x4c, 0xdf,
     0x67, 0x5e, 0x1a, 0x70, 0xc7, 0xa4, 0x7d, 0x3e, 0x5c, 0x94, 0x47, 0x14, 0xce, 0x0f, 0x10, 0xef,
     0x13, 0xfc, 0xf0, 0xd1, 0xbf, 0xb5, 0xd9, 0x22, 0x91, 0x9e, 0x3b, 0xf6, 0x52, 0xa0, 0x43, 0x8c,
     0x53, 0x3f, 0x9c, 0xab, 0x46, 0xfa, 0x01, 0x7c, 0x40, 0x4e, 0x30, 0x86, 0xd3, 0xec, 0xa9, 0xf8,
     0x49, 0x4f, 0x5b, 0xcc, 0x69, 0xc8, 0xbd, 0x3a, 0x23, 0xff, 0xb2, 0x58, 0x50, 0xd2, 0x03, 0xee,
     0x2a, 0xe0, 0x2c, 0x87, 0x51, 0x38, 0xd5, 0xb0, 0x18, 0x6d, 0x59, 0xa3, 0x0a, 0x80, 0x2f, 0x19,
     0xe8, 0x24, 0xb1, 0x76, 0x04, 0x11, 0x83, 0xe1, 0x1b, 0x95, 0x06, 0x99, 0x07, 0xc4, 0x20, 0xc0,
     0x72, 0xdb, 0x32, 0x16, 0x37, 0xa6, 0xe6, 0xf2, 0x35, 0x3c, 0xf4, 0xcf, 0xb4, 0xfe, 0x90, 0x25,
     0x9f, 0xa7, 0x71, 0xc3, 0xae, 0xd7, 0xa1, 0xac, 0xf9, 0x5a, 0x44, 0xf3, 0xc9, 0x81, 0xca, 0x7e,
     0xfd, 0xd4, 0xa8, 0x75, 0x33, 0x02, 0x64, 0x28, 0xf1, 0x68, 0x6c, 0xc6, 0x60, 0x7f, 0x74, 0x78]
]

def AddRoundKey(state,key):
    """
        state = [16 bytes],list
        key = [16 bytes],list
    """
    return [i^j for i,j in zip(state,key)]

def SubBytes(state):
    """
        state = [16 bytes],list
    """
    return [AES_Sbox[i] for i in state]

def key_word_ROL_1(key_word):
    """
        key_word = [4 bytes],list
        左循环1字节
    """
    return [key_word[1],key_word[2],key_word[3],key_word[0]]

def T(key_word,r):
    """
        key_word = [4 bytes],list
        r: round,int,指明当前调用为了生成第r个轮密钥（不计主密钥）
        密钥扩展--T变换
    """
    return [i^j for i,j in zip(SubBytes(key_word_ROL_1(key_word)),Rcon[r])]

def KeyExpand(key,r):
    """
        key = [16 bytes],list
        r:round,int
    """
    temp = [i^j for i,j in zip(T(key[12:],r),key[0:4])]
    for i in range(12):
        temp.append(temp[i] ^ key[i+4])
    return temp

def ShiftRows(state):#左移 右移
    """
        state = [16 bytes],list
    """
    # 左移
    return [state[0],state[5],state[10],state[15],
            state[4],state[9],state[14],state[3],
            state[8],state[13],state[2],state[7],
            state[12],state[1],state[6],state[11],
            ]
    # 右移
    # return [
    #     state[0], state[13], state[10], state[7],
    #     state[4], state[1], state[14], state[11],
    #     state[8], state[5], state[2], state[15],
    #     state[12], state[9], state[6], state[3],
    # ]

def Mul_GF(state_byte, x):
    """
        state_bytes, 1/16 of state, one byte
        x = 1/2/3
    """
    if x == 1:
        return state_byte
    elif x == 2:
        return ((state_byte<<1)&0xff) ^ (0x1b if (state_byte&0x80) else 0x00)
    elif x == 3:
        return ((state_byte << 1) & 0xff) ^ (0x1b if (state_byte & 0x80) else 0x00) ^ state_byte

def MixColumns(state):
    return [
        Mul_GF(state[0], 2) ^ Mul_GF(state[1], 3) ^ Mul_GF(state[2], 1) ^ Mul_GF(state[3], 1),
        Mul_GF(state[0], 1) ^ Mul_GF(state[1], 2) ^ Mul_GF(state[2], 3) ^ Mul_GF(state[3], 1),
        Mul_GF(state[0], 1) ^ Mul_GF(state[1], 1) ^ Mul_GF(state[2], 2) ^ Mul_GF(state[3], 3),
        Mul_GF(state[0], 3) ^ Mul_GF(state[1], 1) ^ Mul_GF(state[2], 1) ^ Mul_GF(state[3], 2),
        Mul_GF(state[4], 2) ^ Mul_GF(state[5], 3) ^ Mul_GF(state[6], 1) ^ Mul_GF(state[7], 1),
        Mul_GF(state[4], 1) ^ Mul_GF(state[5], 2) ^ Mul_GF(state[6], 3) ^ Mul_GF(state[7], 1),
        Mul_GF(state[4], 1) ^ Mul_GF(state[5], 1) ^ Mul_GF(state[6], 2) ^ Mul_GF(state[7], 3),
        Mul_GF(state[4], 3) ^ Mul_GF(state[5], 1) ^ Mul_GF(state[6], 1) ^ Mul_GF(state[7], 2),
        Mul_GF(state[8], 2) ^ Mul_GF(state[9], 3) ^ Mul_GF(state[10], 1) ^ Mul_GF(state[11], 1),
        Mul_GF(state[8], 1) ^ Mul_GF(state[9], 2) ^ Mul_GF(state[10], 3) ^ Mul_GF(state[11], 1),
        Mul_GF(state[8], 1) ^ Mul_GF(state[9], 1) ^ Mul_GF(state[10], 2) ^ Mul_GF(state[11], 3),
        Mul_GF(state[8], 3) ^ Mul_GF(state[9], 1) ^ Mul_GF(state[10], 1) ^ Mul_GF(state[11], 2),
        Mul_GF(state[12], 2) ^ Mul_GF(state[13], 3) ^ Mul_GF(state[14], 1) ^ Mul_GF(state[15], 1),
        Mul_GF(state[12], 1) ^ Mul_GF(state[13], 2) ^ Mul_GF(state[14], 3) ^ Mul_GF(state[15], 1),
        Mul_GF(state[12], 1) ^ Mul_GF(state[13], 1) ^ Mul_GF(state[14], 2) ^ Mul_GF(state[15], 3),
        Mul_GF(state[12], 3) ^ Mul_GF(state[13], 1) ^ Mul_GF(state[14], 1) ^ Mul_GF(state[15], 2),
    ]

def print_state_hex(state,operate_name):
    print(operate_name,[hex(i) for i in state])

def MasterKey_add_mask(mk,offset):
    return [mk[i]^mask[offset[i]] for i in range(len(mk))]

def MaskedSubBytes(state,offset,r):
    return [Masked_AES_SBox[(offset[i]+r)%16][state[i]] for i in range(len(state))]

def Mask_permutation_use_offset_r(offset,r):
    return [mask[(offset[i]+r+1)%16] for i in range(len(offset))]

def MaskCompensation(offset,r):
    """
        生成算法中的掩码补偿矩阵（list形式）
    """
    return [i^j for i,j in zip(MixColumns(ShiftRows(Mask_permutation_use_offset_r(offset,r))), Mask_permutation_use_offset_r(offset,r))]    #正确 掩码补偿
    # return [i^j for i,j in zip(ShiftRows(MixColumns(Mask_permutation_use_offset_r(offset,r))), Mask_permutation_use_offset_r(offset,r))]  #算法 掩码补偿

def state_add_MaskCompensation(state,maskComp):
    return [i^j for i,j in zip(state,maskComp)]

mask = np.array([3,12,53,58,80,95,102,105,150,153,160,175,197,202,243,252])
offset = np.array([9,1,4,12,1,8,5,2,1,0,11,6,14,7,8,3])
plt = [0x00,0x01,0x00,0x01,0x01,0xa1,0x98,0xaf,0xda,0x78,0x17,0x34,0x86,0x15,0x35,0x66]
key = [0x00,0x01,0x20,0x01,0x71,0x01,0x98,0xae,0xda,0x79,0x17,0x14,0x60,0x15,0x35,0x94]

# AES-128 RSM Encryption
for j in range(9): # r∈[0,8]
    # AddRoundKey
    if j==0:
        state = AddRoundKey(plt, MasterKey_add_mask(key, offset))
    else:
        state = AddRoundKey(state, key)

    # MaskedSubBytes     Xi = MaskedSubBytes_offset[i]+r (Xi)
    state = MaskedSubBytes(state, offset, j)

    # ShiftRows
    state = ShiftRows(state)

    # MixColumns
    state = MixColumns(state)

    # MaskCompensation
    state = state_add_MaskCompensation(state, MaskCompensation(offset,j))

    # KeyExpand for next round
    key = KeyExpand(key, j)

# last round
state = AddRoundKey(state,key)
state = MaskedSubBytes(state, offset, j+1)
state = ShiftRows(state)
# 最后一轮之后的独立AddK
key = KeyExpand(key, j+1)
state = AddRoundKey(state, key)
# MaskCompensationLastRound
state = state_add_MaskCompensation(state, ShiftRows(Mask_permutation_use_offset_r(offset,j+1)))

print_state_hex(state, "ciphertext")
